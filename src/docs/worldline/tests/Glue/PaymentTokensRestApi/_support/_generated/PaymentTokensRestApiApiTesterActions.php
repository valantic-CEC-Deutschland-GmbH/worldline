<?php  //[STAMP] b2d113134b369c54eacb2c16c18a049c
// phpcs:ignoreFile
namespace PyzTest\Glue\PaymentTokensRestApi\_generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build

trait PaymentTokensRestApiApiTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets a class instance into the Locator cache to ensure the mocked instance is returned when
     * `$locator->moduleName()->type()` is used.
     *
     * !!! When this method is used the locator will not re-initialize classes with `new` but will return
     * always the already resolved instances. This can have but should not have side-effects.
     *
     * @param string $cacheKey
     * @param mixed $classInstance
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\LocatorHelper::addToLocatorCache()
     */
    public function addToLocatorCache(string $cacheKey, $classInstance): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('addToLocatorCache', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     * @param array|string|float|int|bool $value
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\LocatorHelper::setConfig()
     */
    public function setConfig(string $key, $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('setConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Spryker\Shared\Kernel\LocatorLocatorInterface&\Generated\Zed\Ide\AutoCompletion&\Generated\Service\Ide\AutoCompletion&\Generated\Glue\Ide\AutoCompletion
     * @see \SprykerTest\Shared\Testify\Helper\LocatorHelper::getLocator()
     */
    public function getLocator() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getLocator', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @deprecated Use {@link \SprykerTest\Zed\Testify\Helper\Business\BusinessHelper::getFacade()} instead.
     *
     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
     * @see \SprykerTest\Shared\Testify\Helper\LocatorHelper::getFacade()
     */
    public function getFacade(): \Spryker\Zed\Kernel\Business\AbstractFacade {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getFacade', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param array $seed
     *
     * @return \Generated\Shared\Transfer\CustomerGroupTransfer|\Spryker\Shared\Kernel\Transfer\AbstractTransfer
     * @see \SprykerTest\Zed\CustomerGroup\Helper\CustomerGroupHelper::haveCustomerGroup()
     */
    public function haveCustomerGroup(array $seed = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveCustomerGroup', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param array $override
     *
     * @throws \Codeception\Exception\TestRuntimeException
     *
     * @return \Generated\Shared\Transfer\CustomerTransfer
     * @see \SprykerTest\Shared\Customer\Helper\CustomerDataHelper::haveCustomer()
     */
    public function haveCustomer(array $override = []): \Generated\Shared\Transfer\CustomerTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveCustomer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param \Generated\Shared\Transfer\CustomerTransfer $customerTransfer
     *
     * @throws \Codeception\Exception\TestRuntimeException
     *
     * @return \Generated\Shared\Transfer\CustomerTransfer
     * @see \SprykerTest\Shared\Customer\Helper\CustomerDataHelper::confirmCustomer()
     */
    public function confirmCustomer(\Generated\Shared\Transfer\CustomerTransfer $customerTransfer): \Generated\Shared\Transfer\CustomerTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('confirmCustomer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \PyzTest\Shared\Worldline\Helper\PaymentTokenHelper::havePaymentTokenWithThreeDSecureDataForCustomer()
     */
    public function havePaymentTokenWithThreeDSecureDataForCustomer(\Generated\Shared\Transfer\CustomerTransfer $customerTransfer, array $seed = []): \Generated\Shared\Transfer\WorldlineCreditCardTokenTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('havePaymentTokenWithThreeDSecureDataForCustomer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \PyzTest\Shared\Customer\Helper\CustomerAddressDataHelper::haveCustomerAddress()
     */
    public function haveCustomerAddress(\Generated\Shared\Transfer\CustomerTransfer $customerTransfer, array $addressOverride = []): \Generated\Shared\Transfer\AddressTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveCustomerAddress', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param \Closure $closure
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\DataCleanupHelper::addCleanup()
     */
    public function addCleanup(\Closure $closure): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('addCleanup', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @throws \Codeception\Exception\ModuleException
     *
     * @return array
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::grabResponseJson()
     */
    public function grabResponseJson(): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabResponseJson', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     * @part xml
     *
     * @return int
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::grabResponseCode()
     */
    public function grabResponseCode(): int {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabResponseCode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Extending with response in the message
     *
     * @part json
     *
     * @param int $code
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseCodeIs()
     */
    public function seeResponseCodeIs($code): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Extending with response in the message
     *
     * @part json
     *
     * @param int $code
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseCodeIs()
     */
    public function canSeeResponseCodeIs($code): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $jsonPath
     *
     * @return mixed|array|false
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::getDataFromResponseByJsonPath()
     */
    public function getDataFromResponseByJsonPath(string $jsonPath) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getDataFromResponseByJsonPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $link
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseLinksContainsSelfLink()
     */
    public function seeResponseLinksContainsSelfLink(string $link): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseLinksContainsSelfLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $link
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseLinksContainsSelfLink()
     */
    public function canSeeResponseLinksContainsSelfLink(string $link): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseLinksContainsSelfLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsSingleResourceOfType()
     */
    public function seeResponseDataContainsSingleResourceOfType(string $type): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseDataContainsSingleResourceOfType', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsSingleResourceOfType()
     */
    public function canSeeResponseDataContainsSingleResourceOfType(string $type): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseDataContainsSingleResourceOfType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $id
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceIdEqualTo()
     */
    public function seeSingleResourceIdEqualTo(string $id): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeSingleResourceIdEqualTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $id
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceIdEqualTo()
     */
    public function canSeeSingleResourceIdEqualTo(string $id): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeSingleResourceIdEqualTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param array $attributes
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceContainsAttributes()
     */
    public function seeSingleResourceContainsAttributes(array $attributes): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeSingleResourceContainsAttributes', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param array $attributes
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceContainsAttributes()
     */
    public function canSeeSingleResourceContainsAttributes(array $attributes): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeSingleResourceContainsAttributes', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     * @param string $id
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceHasRelationshipByTypeAndId()
     */
    public function seeSingleResourceHasRelationshipByTypeAndId(string $type, string $id): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeSingleResourceHasRelationshipByTypeAndId', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     * @param string $id
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceHasRelationshipByTypeAndId()
     */
    public function canSeeSingleResourceHasRelationshipByTypeAndId(string $type, string $id): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeSingleResourceHasRelationshipByTypeAndId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $link
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceHasSelfLink()
     */
    public function seeSingleResourceHasSelfLink(string $link): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeSingleResourceHasSelfLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $link
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceHasSelfLink()
     */
    public function canSeeSingleResourceHasSelfLink(string $link): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeSingleResourceHasSelfLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsResourceCollectionOfType()
     */
    public function seeResponseDataContainsResourceCollectionOfType(string $type): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseDataContainsResourceCollectionOfType', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsResourceCollectionOfType()
     */
    public function canSeeResponseDataContainsResourceCollectionOfType(string $type): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseDataContainsResourceCollectionOfType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     * @param int $size
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsResourceCollectionOfTypeWithSizeOf()
     */
    public function seeResponseDataContainsResourceCollectionOfTypeWithSizeOf(string $type, int $size): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseDataContainsResourceCollectionOfTypeWithSizeOf', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     * @param int $size
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsResourceCollectionOfTypeWithSizeOf()
     */
    public function canSeeResponseDataContainsResourceCollectionOfTypeWithSizeOf(string $type, int $size): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseDataContainsResourceCollectionOfTypeWithSizeOf', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsEmptyCollection()
     */
    public function seeResponseDataContainsEmptyCollection(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseDataContainsEmptyCollection', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsEmptyCollection()
     */
    public function canSeeResponseDataContainsEmptyCollection(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseDataContainsEmptyCollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsNonEmptyCollection()
     */
    public function seeResponseDataContainsNonEmptyCollection(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseDataContainsNonEmptyCollection', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseDataContainsNonEmptyCollection()
     */
    public function canSeeResponseDataContainsNonEmptyCollection(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseDataContainsNonEmptyCollection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $resourceName
     * @param string $identifier
     *
     * @return mixed|array
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::grabIncludedByTypeAndId()
     */
    public function grabIncludedByTypeAndId(string $resourceName, string $identifier) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabIncludedByTypeAndId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $id
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceCollectionHasResourceWithId()
     */
    public function seeResourceCollectionHasResourceWithId(string $id): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResourceCollectionHasResourceWithId', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $id
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceCollectionHasResourceWithId()
     */
    public function canSeeResourceCollectionHasResourceWithId(string $id): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResourceCollectionHasResourceWithId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $id
     * @param array $attributes
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceByIdContainsAttributes()
     */
    public function seeResourceByIdContainsAttributes(string $id, array $attributes): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResourceByIdContainsAttributes', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $id
     * @param array $attributes
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceByIdContainsAttributes()
     */
    public function canSeeResourceByIdContainsAttributes(string $id, array $attributes): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResourceByIdContainsAttributes', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $id
     * @param string $relationType
     * @param string $relationId
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceByIdHasRelationshipByTypeAndId()
     */
    public function seeResourceByIdHasRelationshipByTypeAndId(string $id, string $relationType, string $relationId): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResourceByIdHasRelationshipByTypeAndId', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $id
     * @param string $relationType
     * @param string $relationId
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceByIdHasRelationshipByTypeAndId()
     */
    public function canSeeResourceByIdHasRelationshipByTypeAndId(string $id, string $relationType, string $relationId): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResourceByIdHasRelationshipByTypeAndId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $id
     * @param string $link
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceByIdHasSelfLink()
     */
    public function seeResourceByIdHasSelfLink(string $id, string $link): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResourceByIdHasSelfLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $id
     * @param string $link
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceByIdHasSelfLink()
     */
    public function canSeeResourceByIdHasSelfLink(string $id, string $link): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResourceByIdHasSelfLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     * @param string $id
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludesContainsResourceByTypeAndId()
     */
    public function seeIncludesContainsResourceByTypeAndId(string $type, string $id): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeIncludesContainsResourceByTypeAndId', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     * @param string $id
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludesContainsResourceByTypeAndId()
     */
    public function canSeeIncludesContainsResourceByTypeAndId(string $type, string $id): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeIncludesContainsResourceByTypeAndId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::dontSeeIncludesContainResourceOfType()
     */
    public function dontSeeIncludesContainResourceOfType(string $type): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeIncludesContainResourceOfType', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::dontSeeIncludesContainResourceOfType()
     */
    public function cantSeeIncludesContainResourceOfType(string $type): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeIncludesContainResourceOfType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     * @param string $id
     * @param array $attributes
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludedResourceByTypeAndIdContainsAttributes()
     */
    public function seeIncludedResourceByTypeAndIdContainsAttributes(string $type, string $id, array $attributes): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeIncludedResourceByTypeAndIdContainsAttributes', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     * @param string $id
     * @param array $attributes
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludedResourceByTypeAndIdContainsAttributes()
     */
    public function canSeeIncludedResourceByTypeAndIdContainsAttributes(string $type, string $id, array $attributes): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeIncludedResourceByTypeAndIdContainsAttributes', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     * @param string $id
     * @param string $relationType
     * @param string $relationId
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludedResourceByTypeAndIdHasRelationshipByTypeAndId()
     */
    public function seeIncludedResourceByTypeAndIdHasRelationshipByTypeAndId(string $type, string $id, string $relationType, string $relationId): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeIncludedResourceByTypeAndIdHasRelationshipByTypeAndId', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     * @param string $id
     * @param string $relationType
     * @param string $relationId
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludedResourceByTypeAndIdHasRelationshipByTypeAndId()
     */
    public function canSeeIncludedResourceByTypeAndIdHasRelationshipByTypeAndId(string $type, string $id, string $relationType, string $relationId): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeIncludedResourceByTypeAndIdHasRelationshipByTypeAndId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     * @param string $id
     * @param string $link
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludedResourceByTypeAndIdHasSelfLink()
     */
    public function seeIncludedResourceByTypeAndIdHasSelfLink(string $type, string $id, string $link): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeIncludedResourceByTypeAndIdHasSelfLink', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     * @param string $id
     * @param string $link
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludedResourceByTypeAndIdHasSelfLink()
     */
    public function canSeeIncludedResourceByTypeAndIdHasSelfLink(string $type, string $id, string $link): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeIncludedResourceByTypeAndIdHasSelfLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $attribute
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceHasAttribute()
     */
    public function seeSingleResourceHasAttribute(string $attribute): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeSingleResourceHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $attribute
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeSingleResourceHasAttribute()
     */
    public function canSeeSingleResourceHasAttribute(string $attribute): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeSingleResourceHasAttribute', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $attribute
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceCollectionHasAttribute()
     */
    public function seeResourceCollectionHasAttribute(string $attribute): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResourceCollectionHasAttribute', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $attribute
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResourceCollectionHasAttribute()
     */
    public function canSeeResourceCollectionHasAttribute(string $attribute): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResourceCollectionHasAttribute', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $code
     * @param string $index
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseErrorsHaveCode()
     */
    public function seeResponseErrorsHaveCode(string $code, string $index = "*"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseErrorsHaveCode', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $code
     * @param string $index
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseErrorsHaveCode()
     */
    public function canSeeResponseErrorsHaveCode(string $code, string $index = "*"): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseErrorsHaveCode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param int $status
     * @param string $index
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseErrorsHaveStatus()
     */
    public function seeResponseErrorsHaveStatus(int $status, string $index = "*"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseErrorsHaveStatus', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param int $status
     * @param string $index
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseErrorsHaveStatus()
     */
    public function canSeeResponseErrorsHaveStatus(int $status, string $index = "*"): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseErrorsHaveStatus', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $detail
     * @param string $index
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseErrorsHaveDetail()
     */
    public function seeResponseErrorsHaveDetail(string $detail, string $index = "*"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseErrorsHaveDetail', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $detail
     * @param string $index
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeResponseErrorsHaveDetail()
     */
    public function canSeeResponseErrorsHaveDetail(string $detail, string $index = "*"): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseErrorsHaveDetail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param string $type
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludesContainResourceOfType()
     */
    public function seeIncludesContainResourceOfType(string $type): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeIncludesContainResourceOfType', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param string $type
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\GlueRest::seeIncludesContainResourceOfType()
     */
    public function canSeeIncludesContainResourceOfType(string $type): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeIncludesContainResourceOfType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets a HTTP header to be used for all subsequent requests. Use [`deleteHeader`](#deleteHeader) to unset it.
     *
     * ```php
     * <?php
     * $I->haveHttpHeader('Content-Type', 'application/json');
     * // all next requests will contain this header
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::haveHttpHeader()
     */
    public function haveHttpHeader(string $name, string $value): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes a HTTP header (that was originally added by [haveHttpHeader()](#haveHttpHeader)),
     * so that subsequent requests will not send it anymore.
     *
     * Example:
     * ```php
     * <?php
     * $I->haveHttpHeader('X-Requested-With', 'Codeception');
     * $I->sendGet('test-headers.php');
     * // ...
     * $I->deleteHeader('X-Requested-With');
     * $I->sendPost('some-other-page.php');
     * ```
     *
     * @param string $name the name of the header to delete.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::deleteHeader()
     */
    public function deleteHeader(string $name): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('deleteHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks over the given HTTP header and (optionally)
     * its value, asserting that are there
     *
     * @param $value
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeHttpHeader()
     */
    public function seeHttpHeader(string $name, $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeHttpHeader', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks over the given HTTP header and (optionally)
     * its value, asserting that are there
     *
     * @param $value
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeHttpHeader()
     */
    public function canSeeHttpHeader(string $name, $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks over the given HTTP header and (optionally)
     * its value, asserting that are not there
     *
     * @param $value
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeHttpHeader()
     */
    public function dontSeeHttpHeader(string $name, $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeHttpHeader', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks over the given HTTP header and (optionally)
     * its value, asserting that are not there
     *
     * @param $value
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeHttpHeader()
     */
    public function cantSeeHttpHeader(string $name, $value = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that http response header is received only once.
     * HTTP RFC2616 allows multiple response headers with the same name.
     * You can check that you didn't accidentally sent the same header twice.
     *
     * ``` php
     * <?php
     * $I->seeHttpHeaderOnce('Cache-Control');
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeHttpHeaderOnce()
     */
    public function seeHttpHeaderOnce(string $name): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeHttpHeaderOnce', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that http response header is received only once.
     * HTTP RFC2616 allows multiple response headers with the same name.
     * You can check that you didn't accidentally sent the same header twice.
     *
     * ``` php
     * <?php
     * $I->seeHttpHeaderOnce('Cache-Control');
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeHttpHeaderOnce()
     */
    public function canSeeHttpHeaderOnce(string $name): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeHttpHeaderOnce', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the value of the specified header name
     *
     * @param bool $first Whether to return the first value or all header values
     * @return string|array The first header value if $first is true, an array of values otherwise
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::grabHttpHeader()
     */
    public function grabHttpHeader(string $name, bool $first = true): array|string|null {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabHttpHeader', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Adds HTTP authentication via username/password.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::amHttpAuthenticated()
     */
    public function amHttpAuthenticated(string $username, string $password): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amHttpAuthenticated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Adds Digest authentication via username/password.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::amDigestAuthenticated()
     */
    public function amDigestAuthenticated(string $username, string $password): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amDigestAuthenticated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Adds Bearer authentication via access token.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::amBearerAuthenticated()
     */
    public function amBearerAuthenticated(string $accessToken): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amBearerAuthenticated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Adds NTLM authentication via username/password.
     * Requires client to be Guzzle >=6.3.0
     * Out of scope for functional modules.
     *
     * Example:
     * ```php
     * <?php
     * $I->amNTLMAuthenticated('jon_snow', 'targaryen');
     * ```
     *
     * @throws ModuleException
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::amNTLMAuthenticated()
     */
    public function amNTLMAuthenticated(string $username, string $password): void {
        $this->getScenario()->runStep(new \Codeception\Step\Condition('amNTLMAuthenticated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends a POST request to given uri. Parameters and files can be provided separately.
     *
     * Example:
     * ```php
     * <?php
     * //simple POST call
     * $response = $I->sendPost('/message', ['subject' => 'Read this!', 'to' => 'johndoe@example.com']);
     * //simple upload method
     * $I->sendPost('/message/24', ['inline' => 0], ['attachmentFile' => codecept_data_dir('sample_file.pdf')]);
     * //uploading a file with a custom name and mime-type. This is also useful to simulate upload errors.
     * $I->sendPost('/message/24', ['inline' => 0], [
     *     'attachmentFile' => [
     *          'name' => 'document.pdf',
     *          'type' => 'application/pdf',
     *          'error' => UPLOAD_ERR_OK,
     *          'size' => filesize(codecept_data_dir('sample_file.pdf')),
     *          'tmp_name' => codecept_data_dir('sample_file.pdf')
     *     ]
     * ]);
     * // If your field names contain square brackets (e.g. `<input type="text" name="form[task]">`),
     * // PHP parses them into an array. In this case you need to pass the fields like this:
     * $I->sendPost('/add-task', ['form' => [
     *     'task' => 'lorem ipsum',
     *     'category' => 'miscellaneous',
     * ]]);
     * ```
     *
     * @param array|string|JsonSerializable $params
     * @param array $files A list of filenames or "mocks" of $_FILES (each entry being an array with the following
     *                     keys: name, type, error, size, tmp_name (pointing to the real file path). Each key works
     *                     as the "name" attribute of a file input field.
     *
     * @see https://php.net/manual/en/features.file-upload.post-method.php
     * @see codecept_data_dir()
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendPost()
     */
    public function sendPost(string $url, $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendPost', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends a HEAD request to given uri.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendHead()
     */
    public function sendHead(string $url, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendHead', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends an OPTIONS request to given uri.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendOptions()
     */
    public function sendOptions(string $url, array $params = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('sendOptions', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends a GET request to given uri.
     *
     * ```php
     * <?php
     * $response = $I->sendGet('/users');
     *
     * // send get with query params
     * $I->sendGet('/orders', ['id' => 1])
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendGet()
     */
    public function sendGet(string $url, array $params = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendGet', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends PUT request to given uri.
     *
     * ```php
     * <?php
     * $response = $I->sendPut('/message/1', ['subject' => 'Read this!']);
     * ```
     *
     * @param array|string|JsonSerializable $params
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendPut()
     */
    public function sendPut(string $url, $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendPut', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends PATCH request to given uri.
     *
     * ```php
     * <?php
     * $response = $I->sendPatch('/message/1', ['subject' => 'Read this!']);
     * ```
     *
     * @param array|string|JsonSerializable $params
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendPatch()
     */
    public function sendPatch(string $url, $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendPatch', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends DELETE request to given uri.
     *
     * ```php
     * <?php
     * $I->sendDelete('/message/1');
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendDelete()
     */
    public function sendDelete(string $url, array $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendDelete', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends a HTTP request.
     *
     * @param array|string|JsonSerializable $params
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::send()
     */
    public function send(string $method, string $url, $params = [], array $files = []) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('send', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends LINK request to given uri.
     *
     * @param array $linkEntries (entry is array with keys "uri" and "link-param")
     *
     * @link https://tools.ietf.org/html/rfc2068#section-19.6.2.4
     *
     * @author samva.ua@gmail.com
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendLink()
     */
    public function sendLink(string $url, array $linkEntries): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('sendLink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sends UNLINK request to given uri.
     *
     * @param array $linkEntries (entry is array with keys "uri" and "link-param")
     * @link https://tools.ietf.org/html/rfc2068#section-19.6.2.4
     * @author samva.ua@gmail.com
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::sendUnlink()
     */
    public function sendUnlink(string $url, array $linkEntries): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('sendUnlink', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether last response was valid JSON.
     * This is done with json_last_error function.
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseIsJson()
     */
    public function seeResponseIsJson(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseIsJson', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether last response was valid JSON.
     * This is done with json_last_error function.
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseIsJson()
     */
    public function canSeeResponseIsJson(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseIsJson', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether the last response contains text.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseContains()
     */
    public function seeResponseContains(string $text): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseContains', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether the last response contains text.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseContains()
     */
    public function canSeeResponseContains(string $text): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether last response do not contain text.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeResponseContains()
     */
    public function dontSeeResponseContains(string $text): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseContains', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether last response do not contain text.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeResponseContains()
     */
    public function cantSeeResponseContains(string $text): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether the last JSON response contains provided array.
     * The response is converted to array with json_decode($response, true)
     * Thus, JSON is represented by associative array.
     * This method matches that response array contains provided array.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * // response: {name: john, email: john@gmail.com}
     * $I->seeResponseContainsJson(array('name' => 'john'));
     *
     * // response {user: john, profile: { email: john@gmail.com }}
     * $I->seeResponseContainsJson(array('email' => 'john@gmail.com'));
     *
     * ```
     *
     * This method recursively checks if one array can be found inside of another.
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseContainsJson()
     */
    public function seeResponseContainsJson(array $json = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseContainsJson', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether the last JSON response contains provided array.
     * The response is converted to array with json_decode($response, true)
     * Thus, JSON is represented by associative array.
     * This method matches that response array contains provided array.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * // response: {name: john, email: john@gmail.com}
     * $I->seeResponseContainsJson(array('name' => 'john'));
     *
     * // response {user: john, profile: { email: john@gmail.com }}
     * $I->seeResponseContainsJson(array('email' => 'john@gmail.com'));
     *
     * ```
     *
     * This method recursively checks if one array can be found inside of another.
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseContainsJson()
     */
    public function canSeeResponseContainsJson(array $json = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseContainsJson', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether last response matches the supplied json schema (https://json-schema.org/)
     * Supply schema as json string.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * // response: {"name": "john", "age": 20}
     * $I->seeResponseIsValidOnJsonSchemaString('{"type": "object"}');
     *
     * // response {"name": "john", "age": 20}
     * $schema = [
     *  "properties" => [
     *      "age" => [
     *          "type" => "integer",
     *          "minimum" => 18
     *      ]
     *  ]
     * ];
     * $I->seeResponseIsValidOnJsonSchemaString(json_encode($schema));
     *
     * ```
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseIsValidOnJsonSchemaString()
     */
    public function seeResponseIsValidOnJsonSchemaString(string $schema): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseIsValidOnJsonSchemaString', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether last response matches the supplied json schema (https://json-schema.org/)
     * Supply schema as json string.
     *
     * Examples:
     *
     * ``` php
     * <?php
     * // response: {"name": "john", "age": 20}
     * $I->seeResponseIsValidOnJsonSchemaString('{"type": "object"}');
     *
     * // response {"name": "john", "age": 20}
     * $schema = [
     *  "properties" => [
     *      "age" => [
     *          "type" => "integer",
     *          "minimum" => 18
     *      ]
     *  ]
     * ];
     * $I->seeResponseIsValidOnJsonSchemaString(json_encode($schema));
     *
     * ```
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseIsValidOnJsonSchemaString()
     */
    public function canSeeResponseIsValidOnJsonSchemaString(string $schema): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseIsValidOnJsonSchemaString', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks whether last response matches the supplied json schema (https://json-schema.org/)
     * Supply schema as relative file path in your project directory or an absolute path
     *
     * @part json
     * @see codecept_absolute_path()
     * @see \Codeception\Module\REST::seeResponseIsValidOnJsonSchema()
     */
    public function seeResponseIsValidOnJsonSchema(string $schemaFilename): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseIsValidOnJsonSchema', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks whether last response matches the supplied json schema (https://json-schema.org/)
     * Supply schema as relative file path in your project directory or an absolute path
     *
     * @part json
     * @see codecept_absolute_path()
     * @see \Codeception\Module\REST::seeResponseIsValidOnJsonSchema()
     */
    public function canSeeResponseIsValidOnJsonSchema(string $schemaFilename): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseIsValidOnJsonSchema', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns current response so that it can be used in next scenario steps.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $user_id = $I->grabResponse();
     * $I->sendPut('/user', array('id' => $user_id, 'name' => 'davert'));
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::grabResponse()
     */
    public function grabResponse(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabResponse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Even for a single value an array is returned.
     * Example:
     *
     * ``` php
     * <?php
     * // match the first `user.id` in json
     * $firstUserId = $I->grabDataFromResponseByJsonPath('$..users[0].id');
     * $I->sendPut('/user', array('id' => $firstUserId[0], 'name' => 'davert'));
     * ```
     *
     * @return array Array of matching items
     * @throws Exception
     * @part json
     * @see \Codeception\Module\REST::grabDataFromResponseByJsonPath()
     */
    public function grabDataFromResponseByJsonPath(string $jsonPath): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabDataFromResponseByJsonPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if json structure in response matches the xpath provided.
     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.
     * This assertion allows you to check the structure of response json.
     *     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonMatchesXpath('//store/book/author');
     * // first book in store has author
     * $I->seeResponseJsonMatchesXpath('//store/book[1]/author');
     * // at least one item in store has price
     * $I->seeResponseJsonMatchesXpath('/store//price');
     * ```
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonMatchesXpath()
     */
    public function seeResponseJsonMatchesXpath(string $xPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseJsonMatchesXpath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if json structure in response matches the xpath provided.
     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.
     * This assertion allows you to check the structure of response json.
     *     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonMatchesXpath('//store/book/author');
     * // first book in store has author
     * $I->seeResponseJsonMatchesXpath('//store/book[1]/author');
     * // at least one item in store has price
     * $I->seeResponseJsonMatchesXpath('/store//price');
     * ```
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonMatchesXpath()
     */
    public function canSeeResponseJsonMatchesXpath(string $xPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseJsonMatchesXpath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if applying xpath to json structure in response matches the expected result.
     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.
     * This assertion allows you to check the structure of response json.
     *     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonXpathEvaluatesTo('count(//store/book/author) > 0', true);
     * // count the number of books written by given author is 5
     * $I->seeResponseJsonMatchesXpath("//author[text() = 'Nigel Rees']", 1.0);
     * ```
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonXpathEvaluatesTo()
     */
    public function seeResponseJsonXpathEvaluatesTo(string $xPath, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseJsonXpathEvaluatesTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if applying xpath to json structure in response matches the expected result.
     * JSON is not supposed to be checked against XPath, yet it can be converted to xml and used with XPath.
     * This assertion allows you to check the structure of response json.
     *     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonXpathEvaluatesTo('count(//store/book/author) > 0', true);
     * // count the number of books written by given author is 5
     * $I->seeResponseJsonMatchesXpath("//author[text() = 'Nigel Rees']", 1.0);
     * ```
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonXpathEvaluatesTo()
     */
    public function canSeeResponseJsonXpathEvaluatesTo(string $xPath, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseJsonXpathEvaluatesTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opposite to seeResponseJsonXpathEvaluatesTo
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonXpathEvaluatesTo()
     */
    public function dontSeeResponseJsonXpathEvaluatesTo(string $xPath, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseJsonXpathEvaluatesTo', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Opposite to seeResponseJsonXpathEvaluatesTo
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonXpathEvaluatesTo()
     */
    public function cantSeeResponseJsonXpathEvaluatesTo(string $xPath, $expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseJsonXpathEvaluatesTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opposite to seeResponseJsonMatchesXpath
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesXpath()
     */
    public function dontSeeResponseJsonMatchesXpath(string $xPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseJsonMatchesXpath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Opposite to seeResponseJsonMatchesXpath
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesXpath()
     */
    public function cantSeeResponseJsonMatchesXpath(string $xPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseJsonMatchesXpath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Checks if JSON structure in response matches JSONPath.
     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonMatchesJsonPath('$.store.book[*].author');
     * // first book in store has author
     * $I->seeResponseJsonMatchesJsonPath('$.store.book[0].author');
     * // at least one item in store has price
     * $I->seeResponseJsonMatchesJsonPath('$.store..price');
     * ```
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonMatchesJsonPath()
     */
    public function seeResponseJsonMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseJsonMatchesJsonPath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Checks if JSON structure in response matches JSONPath.
     *
     * ```json
     *   { "store": {
     *       "book": [
     *         { "category": "reference",
     *           "author": "Nigel Rees",
     *           "title": "Sayings of the Century",
     *           "price": 8.95
     *         },
     *         { "category": "fiction",
     *           "author": "Evelyn Waugh",
     *           "title": "Sword of Honour",
     *           "price": 12.99
     *         }
     *    ],
     *       "bicycle": {
     *         "color": "red",
     *         "price": 19.95
     *       }
     *     }
     *   }
     * ```
     *
     * ```php
     * <?php
     * // at least one book in store has author
     * $I->seeResponseJsonMatchesJsonPath('$.store.book[*].author');
     * // first book in store has author
     * $I->seeResponseJsonMatchesJsonPath('$.store.book[0].author');
     * // at least one item in store has price
     * $I->seeResponseJsonMatchesJsonPath('$.store..price');
     * ```
     *
     * @part json
     * @see \Codeception\Module\REST::seeResponseJsonMatchesJsonPath()
     */
    public function canSeeResponseJsonMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseJsonMatchesJsonPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Opposite to [`seeResponseJsonMatchesJsonPath()`](#seeResponseJsonMatchesJsonPath)
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesJsonPath()
     */
    public function dontSeeResponseJsonMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseJsonMatchesJsonPath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * See [#jsonpath](#jsonpath) for general info on JSONPath.
     * Opposite to [`seeResponseJsonMatchesJsonPath()`](#seeResponseJsonMatchesJsonPath)
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseJsonMatchesJsonPath()
     */
    public function cantSeeResponseJsonMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseJsonMatchesJsonPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opposite to seeResponseContainsJson
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseContainsJson()
     */
    public function dontSeeResponseContainsJson(array $json = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseContainsJson', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Opposite to seeResponseContainsJson
     *
     * @part json
     * @see \Codeception\Module\REST::dontSeeResponseContainsJson()
     */
    public function cantSeeResponseContainsJson(array $json = []): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseContainsJson', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that JSON matches provided types.
     * In case you don't know the actual values of JSON data returned you can match them by type.
     * It starts the check with a root element. If JSON data is an array it will check all elements of it.
     * You can specify the path in the json which should be checked with JsonPath
     *
     * Basic example:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'name': 'davert', 'is_active': false}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'integer',
     *      'name' => 'string|null',
     *      'is_active' => 'boolean'
     * ]);
     *
     * // narrow down matching with JsonPath:
     * // {"users": [{ "name": "davert"}, {"id": 1}]}
     * $I->seeResponseMatchesJsonType(['name' => 'string'], '$.users[0]');
     * ```
     *
     * You can check if the record contains fields with the data types you expect.
     * The list of possible data types:
     *
     * * string
     * * integer
     * * float
     * * array (json object is array as well)
     * * boolean
     * * null
     *
     * You can also use nested data type structures, and define multiple types for the same field:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'name': 'davert', 'company': {'name': 'Codegyre'}}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'integer|string', // multiple types
     *      'company' => ['name' => 'string']
     * ]);
     * ```
     *
     * You can also apply filters to check values. Filter can be applied with a `:` char after the type declaration,
     * or after another filter if you need more than one.
     *
     * Here is the list of possible filters:
     *
     * * `integer:>{val}` - checks that integer is greater than {val} (works with float and string types too).
     * * `integer:<{val}` - checks that integer is lower than {val} (works with float and string types too).
     * * `string:url` - checks that value is valid url.
     * * `string:date` - checks that value is date in JavaScript format: https://weblog.west-wind.com/posts/2014/Jan/06/JavaScript-JSON-Date-Parsing-and-real-Dates
     * * `string:email` - checks that value is a valid email according to https://emailregex.com/
     * * `string:regex({val})` - checks that string matches a regex provided with {val}
     *
     * This is how filters can be used:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'email' => 'davert@codeception.com'}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'string:>0:<1000', // multiple filters can be used
     *      'email' => 'string:regex(~\@~)' // we just check that @ char is included
     * ]);
     *
     * // {'user_id': '1'}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'string:>0', // works with strings as well
     * ]);
     * ```
     *
     * You can also add custom filters by using `{@link JsonType::addCustomFilter()}`.
     * See [JsonType reference](https://codeception.com/docs/reference/JsonType).
     *
     * @part json
     * @see JsonType
     * @see \Codeception\Module\REST::seeResponseMatchesJsonType()
     */
    public function seeResponseMatchesJsonType(array $jsonType, ?string $jsonPath = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseMatchesJsonType', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that JSON matches provided types.
     * In case you don't know the actual values of JSON data returned you can match them by type.
     * It starts the check with a root element. If JSON data is an array it will check all elements of it.
     * You can specify the path in the json which should be checked with JsonPath
     *
     * Basic example:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'name': 'davert', 'is_active': false}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'integer',
     *      'name' => 'string|null',
     *      'is_active' => 'boolean'
     * ]);
     *
     * // narrow down matching with JsonPath:
     * // {"users": [{ "name": "davert"}, {"id": 1}]}
     * $I->seeResponseMatchesJsonType(['name' => 'string'], '$.users[0]');
     * ```
     *
     * You can check if the record contains fields with the data types you expect.
     * The list of possible data types:
     *
     * * string
     * * integer
     * * float
     * * array (json object is array as well)
     * * boolean
     * * null
     *
     * You can also use nested data type structures, and define multiple types for the same field:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'name': 'davert', 'company': {'name': 'Codegyre'}}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'integer|string', // multiple types
     *      'company' => ['name' => 'string']
     * ]);
     * ```
     *
     * You can also apply filters to check values. Filter can be applied with a `:` char after the type declaration,
     * or after another filter if you need more than one.
     *
     * Here is the list of possible filters:
     *
     * * `integer:>{val}` - checks that integer is greater than {val} (works with float and string types too).
     * * `integer:<{val}` - checks that integer is lower than {val} (works with float and string types too).
     * * `string:url` - checks that value is valid url.
     * * `string:date` - checks that value is date in JavaScript format: https://weblog.west-wind.com/posts/2014/Jan/06/JavaScript-JSON-Date-Parsing-and-real-Dates
     * * `string:email` - checks that value is a valid email according to https://emailregex.com/
     * * `string:regex({val})` - checks that string matches a regex provided with {val}
     *
     * This is how filters can be used:
     *
     * ```php
     * <?php
     * // {'user_id': 1, 'email' => 'davert@codeception.com'}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'string:>0:<1000', // multiple filters can be used
     *      'email' => 'string:regex(~\@~)' // we just check that @ char is included
     * ]);
     *
     * // {'user_id': '1'}
     * $I->seeResponseMatchesJsonType([
     *      'user_id' => 'string:>0', // works with strings as well
     * ]);
     * ```
     *
     * You can also add custom filters by using `{@link JsonType::addCustomFilter()}`.
     * See [JsonType reference](https://codeception.com/docs/reference/JsonType).
     *
     * @part json
     * @see JsonType
     * @see \Codeception\Module\REST::seeResponseMatchesJsonType()
     */
    public function canSeeResponseMatchesJsonType(array $jsonType, ?string $jsonPath = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseMatchesJsonType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opposite to `seeResponseMatchesJsonType`.
     *
     * @part json
     * @param array $jsonType JsonType structure
     * @see seeResponseMatchesJsonType
     * @see \Codeception\Module\REST::dontSeeResponseMatchesJsonType()
     */
    public function dontSeeResponseMatchesJsonType(array $jsonType, ?string $jsonPath = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseMatchesJsonType', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Opposite to `seeResponseMatchesJsonType`.
     *
     * @part json
     * @param array $jsonType JsonType structure
     * @see seeResponseMatchesJsonType
     * @see \Codeception\Module\REST::dontSeeResponseMatchesJsonType()
     */
    public function cantSeeResponseMatchesJsonType(array $jsonType, ?string $jsonPath = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseMatchesJsonType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if response is exactly the same as provided.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseEquals()
     */
    public function seeResponseEquals($expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if response is exactly the same as provided.
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseEquals()
     */
    public function canSeeResponseEquals($expected): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that response code is not equal to provided value.
     *
     * ```php
     * <?php
     * $I->dontSeeResponseCodeIs(200);
     *
     * // preferred to use \Codeception\Util\HttpCode
     * $I->dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeResponseCodeIs()
     */
    public function dontSeeResponseCodeIs(int $code): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseCodeIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that response code is not equal to provided value.
     *
     * ```php
     * <?php
     * $I->dontSeeResponseCodeIs(200);
     *
     * // preferred to use \Codeception\Util\HttpCode
     * $I->dontSeeResponseCodeIs(\Codeception\Util\HttpCode::OK);
     * ```
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeResponseCodeIs()
     */
    public function cantSeeResponseCodeIs(int $code): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseCodeIs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 2xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsSuccessful()
     */
    public function seeResponseCodeIsSuccessful(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsSuccessful', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 2xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsSuccessful()
     */
    public function canSeeResponseCodeIsSuccessful(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsSuccessful', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code 3xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsRedirection()
     */
    public function seeResponseCodeIsRedirection(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsRedirection', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code 3xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsRedirection()
     */
    public function canSeeResponseCodeIsRedirection(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsRedirection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 4xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsClientError()
     */
    public function seeResponseCodeIsClientError(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsClientError', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 4xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsClientError()
     */
    public function canSeeResponseCodeIsClientError(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsClientError', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the response code is 5xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsServerError()
     */
    public function seeResponseCodeIsServerError(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseCodeIsServerError', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that the response code is 5xx
     *
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeResponseCodeIsServerError()
     */
    public function canSeeResponseCodeIsServerError(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseCodeIsServerError', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the hash of a binary response is exactly the same as provided.
     * Parameter can be passed as any hash string supported by `hash()`, with an
     * optional second parameter to specify the hash type, which defaults to sha1.
     *
     * Example: Using sha1 hash key
     *
     * ```php
     * <?php
     * $I->seeBinaryResponseEquals("df589122eac0f6a7bd8795436e692e3675cadc3b");
     * ```
     *
     * Example: Using sha1 for a file contents
     *
     * ```php
     * <?php
     * $fileData = file_get_contents("test_file.jpg");
     * $I->seeBinaryResponseEquals(md5($fileData));
     * ```
     * Example: Using sha256 hash
     *
     * ```php
     * <?php
     * $fileData = '/9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k='; // very small jpeg
     * $I->seeBinaryResponseEquals(hash("sha256", base64_decode($fileData)), 'sha256');
     * ```
     *
     * @param string $hash the hashed data response expected
     * @param string $algo the hash algorithm to use. Default sha1.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeBinaryResponseEquals()
     */
    public function seeBinaryResponseEquals(string $hash, string $algo = "sha1"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeBinaryResponseEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the hash of a binary response is exactly the same as provided.
     * Parameter can be passed as any hash string supported by `hash()`, with an
     * optional second parameter to specify the hash type, which defaults to sha1.
     *
     * Example: Using sha1 hash key
     *
     * ```php
     * <?php
     * $I->seeBinaryResponseEquals("df589122eac0f6a7bd8795436e692e3675cadc3b");
     * ```
     *
     * Example: Using sha1 for a file contents
     *
     * ```php
     * <?php
     * $fileData = file_get_contents("test_file.jpg");
     * $I->seeBinaryResponseEquals(md5($fileData));
     * ```
     * Example: Using sha256 hash
     *
     * ```php
     * <?php
     * $fileData = '/9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k='; // very small jpeg
     * $I->seeBinaryResponseEquals(hash("sha256", base64_decode($fileData)), 'sha256');
     * ```
     *
     * @param string $hash the hashed data response expected
     * @param string $algo the hash algorithm to use. Default sha1.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::seeBinaryResponseEquals()
     */
    public function canSeeBinaryResponseEquals(string $hash, string $algo = "sha1"): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeBinaryResponseEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if the hash of a binary response is not the same as provided.
     *
     * ```php
     * <?php
     * $I->dontSeeBinaryResponseEquals("8c90748342f19b195b9c6b4eff742ded");
     * ```
     * Opposite to `seeBinaryResponseEquals`
     *
     * @param string $hash the hashed data response expected
     * @param string $algo the hash algorithm to use. Default md5.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeBinaryResponseEquals()
     */
    public function dontSeeBinaryResponseEquals(string $hash, string $algo = "sha1"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeBinaryResponseEquals', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if the hash of a binary response is not the same as provided.
     *
     * ```php
     * <?php
     * $I->dontSeeBinaryResponseEquals("8c90748342f19b195b9c6b4eff742ded");
     * ```
     * Opposite to `seeBinaryResponseEquals`
     *
     * @param string $hash the hashed data response expected
     * @param string $algo the hash algorithm to use. Default md5.
     * @part json
     * @part xml
     * @see \Codeception\Module\REST::dontSeeBinaryResponseEquals()
     */
    public function cantSeeBinaryResponseEquals(string $hash, string $algo = "sha1"): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeBinaryResponseEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Prevents automatic redirects to be followed by the client
     *
     * ```php
     * <?php
     * $I->stopFollowingRedirects();
     * ```
     *
     * @part xml
     * @part json
     * @see \Codeception\Module\REST::stopFollowingRedirects()
     */
    public function stopFollowingRedirects(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('stopFollowingRedirects', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Enables automatic redirects to be followed by the client
     *
     * ```php
     * <?php
     * $I->startFollowingRedirects();
     * ```
     *
     * @part xml
     * @part json
     * @see \Codeception\Module\REST::startFollowingRedirects()
     */
    public function startFollowingRedirects(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('startFollowingRedirects', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @throws \Codeception\Exception\ModuleException
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\OpenApi3::seeResponseMatchesOpenApiSchema()
     */
    public function seeResponseMatchesOpenApiSchema(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseMatchesOpenApiSchema', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @throws \Codeception\Exception\ModuleException
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\OpenApi3::seeResponseMatchesOpenApiSchema()
     */
    public function canSeeResponseMatchesOpenApiSchema(): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseMatchesOpenApiSchema', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @part json
     *
     * @param array $responseData
     * @param \Spryker\Glue\Testify\OpenApi3\SchemaObject\Schema $responseSchema
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\OpenApi3::seeResponseDataMatchesOpenApiSchema()
     */
    public function seeResponseDataMatchesOpenApiSchema(array $responseData, \Spryker\Glue\Testify\OpenApi3\SchemaObject\Schema $responseSchema): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseDataMatchesOpenApiSchema', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @part json
     *
     * @param array $responseData
     * @param \Spryker\Glue\Testify\OpenApi3\SchemaObject\Schema $responseSchema
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\OpenApi3::seeResponseDataMatchesOpenApiSchema()
     */
    public function canSeeResponseDataMatchesOpenApiSchema(array $responseData, \Spryker\Glue\Testify\OpenApi3\SchemaObject\Schema $responseSchema): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseDataMatchesOpenApiSchema', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $className
     *
     * @throws \Codeception\Exception\ModuleException
     *
     * @return \Codeception\Module
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::locateModule()
     */
    public function locateModule(string $className): \Codeception\Module {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('locateModule', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $className
     *
     * @return \Codeception\Module|null
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::findModule()
     */
    public function findModule(string $className): ?\Codeception\Module {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('findModule', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $jsonPath
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::seeResponseMatchesJsonPath()
     */
    public function seeResponseMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseMatchesJsonPath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @param string $jsonPath
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::seeResponseMatchesJsonPath()
     */
    public function canSeeResponseMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseMatchesJsonPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $jsonPath
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::dontSeeResponseMatchesJsonPath()
     */
    public function dontSeeResponseMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseMatchesJsonPath', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @param string $jsonPath
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::dontSeeResponseMatchesJsonPath()
     */
    public function cantSeeResponseMatchesJsonPath(string $jsonPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeResponseMatchesJsonPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param array $jsonType
     * @param string $jsonPath
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::seeResponseJsonPathMatchesJsonType()
     */
    public function seeResponseJsonPathMatchesJsonType(array $jsonType, string $jsonPath = "$"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseJsonPathMatchesJsonType', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @param array $jsonType
     * @param string $jsonPath
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::seeResponseJsonPathMatchesJsonType()
     */
    public function canSeeResponseJsonPathMatchesJsonType(array $jsonType, string $jsonPath = "$"): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseJsonPathMatchesJsonType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param array $subArray
     * @param string $jsonPath
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::seeResponseJsonPathContains()
     */
    public function seeResponseJsonPathContains(array $subArray, string $jsonPath = "$"): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeResponseJsonPathContains', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @param array $subArray
     * @param string $jsonPath
     *
     * @return void
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::seeResponseJsonPathContains()
     */
    public function canSeeResponseJsonPathContains(array $subArray, string $jsonPath = "$"): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeResponseJsonPathContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Asserts that an array has a specified subset.
     *
     * @param array|ArrayAccess|mixed[] $subset
     * @param array|ArrayAccess|mixed[] $array
     *
     * @throws ExpectationFailedException
     * @throws InvalidArgumentException|Exception
     * @throws Exception
     * @see \SprykerTest\Glue\Testify\Helper\JsonPath::assertArraySubset()
     */
    public function assertArraySubset($subset, $array, bool $checkForObjectIdentity = false, string $message = ""): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertArraySubset', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\DependencyHelper::clearFactoryContainerCache()
     */
    public function clearFactoryContainerCache(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('clearFactoryContainerCache', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $key
     * @param mixed $value
     * @param string|null $onlyFor
     *
     * @return void
     * @see \SprykerTest\Shared\Testify\Helper\DependencyHelper::setDependency()
     */
    public function setDependency(string $key, $value, ?string $onlyFor = NULL): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('setDependency', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param array $override
     *
     * @return \Generated\Shared\Transfer\CustomerAccessTransfer
     * @see \SprykerTest\Zed\CustomerAccess\Helper\CustomerAccessHelper::haveCustomerAccess()
     */
    public function haveCustomerAccess(array $override = []): \Generated\Shared\Transfer\CustomerAccessTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveCustomerAccess', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Specification:
     * - Authorizes customer and returns OauthResponseTransfer.
     * - Fails test in case oauth request was not successful.
     *
     * @part json
     *
     * @param \Generated\Shared\Transfer\CustomerTransfer $customerTransfer
     * @param string|null $anonymousCustomerReference
     * @param string|null $clientId
     * @param string|null $clientSecret
     *
     * @return \Generated\Shared\Transfer\OauthResponseTransfer
     * @see \SprykerTest\Glue\AuthRestApi\Helper\AuthRestApiHelper::haveAuthorizationToGlue()
     */
    public function haveAuthorizationToGlue(\Generated\Shared\Transfer\CustomerTransfer $customerTransfer, ?string $anonymousCustomerReference = NULL, ?string $clientId = NULL, ?string $clientSecret = NULL): \Generated\Shared\Transfer\OauthResponseTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveAuthorizationToGlue', func_get_args()));
    }
}
